// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                         String           @id @db.VarChar(36)
  email                      String           @unique @db.VarChar(125)
  password                   String           @db.VarChar(255)
  name                       String           @unique @db.VarChar(55)
  type                       AccountType
  active                     Boolean          @default(true)
  approved                   Boolean          @default(false)
  cnpj                       String?          @unique @db.VarChar(14)
  animals                    Animal[]
  AnimalTransfersAsRequester AnimalTransfer[] @relation(name: "requester")
  AnimalTransfersAsReceiver  AnimalTransfer[] @relation(name: "receiver")
}

enum AccountType {
  ADMIN
  PROTECTOR
}

model Animal {
  id             String              @id @db.VarChar(36)
  name           String              @db.VarChar(55)
  specie         AnimalSpecie
  gender         AnimalGender
  sickness       AnimalsOnSickness[]
  active         Boolean             @default(true)
  owner          String              @map("owner_id") @db.VarChar(36)
  account        Account             @relation(fields: [owner], references: [id])
  AnimalTransfer AnimalTransfer[]
}

model Sickness {
  id      String              @id @db.VarChar(36)
  name    String              @db.VarChar(55)
  species AnimalSpecie[]
  animals AnimalsOnSickness[]
}

enum AnimalSpecie {
  CAT
  DOG
}

enum AnimalGender {
  MALE
  FEMALE
}

model AnimalsOnSickness {
  animal     Animal   @relation(fields: [animalId], references: [id])
  animalId   String   @map("animal_id")
  sickness   Sickness @relation(fields: [sicknessId], references: [id])
  sicknessId String   @map("sickness_id")
  addedAt    DateTime @default(now()) @map("added_at")

  @@id([animalId, sicknessId])
}

model AnimalTransfer {
  id          String               @id @db.VarChar(36)
  animal      Animal               @relation(fields: [animalId], references: [id])
  animalId    String               @map("animal_id")
  requester   Account              @relation(name: "requester", fields: [requesterId], references: [id])
  requesterId String               @map("requester_id") @db.VarChar(36)
  receiver    Account              @relation(name: "receiver", fields: [receiverId], references: [id])
  receiverId  String               @map("receiver_id") @db.VarChar(36)
  status      AnimalTransferStatus
}

enum AnimalTransferStatus {
  ACCEPTED
  CANCELED
  REFUSED
  WAITING_APPROVAL
}
