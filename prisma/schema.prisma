// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                             String                  @id @db.VarChar(36)
  email                          String                  @unique @db.VarChar(125)
  password                       String                  @db.VarChar(255)
  name                           String                  @unique @db.VarChar(55)
  type                           AccountType
  active                         Boolean                 @default(true)
  approved                       Boolean                 @default(false)
  cnpj                           String?                 @unique @db.VarChar(14)
  animals                        Animal[]
  AnimalTransferencesAsRequester AnimalTransference[]    @relation(name: "requester")
  AnimalTransferencesAsReceiver  AnimalTransference[]    @relation(name: "receiver")
  addedAt                        DateTime                @default(now())
  ProtectorSawComplaint          ProtectorSawComplaint[]
}

enum AccountType {
  ADMIN
  PROTECTOR
}

model Animal {
  id                  String               @id @db.VarChar(36)
  name                String               @db.VarChar(55)
  specie              AnimalSpecie
  gender              AnimalGender
  sickness            AnimalsOnSickness[]
  description         String?              @db.VarChar(255)
  active              Boolean              @default(true)
  owner               String               @map("owner_id") @db.VarChar(36)
  account             Account              @relation(fields: [owner], references: [id])
  AnimalTransferences AnimalTransference[]
  addedAt             DateTime             @default(now())
}

model Sickness {
  id      String                   @id @db.VarChar(36)
  name    String                   @unique @db.VarChar(55)
  species SicknessOnAnimalSpecie[]
  animals AnimalsOnSickness[]
  active  Boolean                  @default(true)
}

model SicknessOnAnimalSpecie {
  sickness   Sickness     @relation(fields: [sicknessId], references: [id])
  sicknessId String       @map("sickness_id")
  specie     AnimalSpecie

  @@id([sicknessId, specie])
}

enum AnimalSpecie {
  CAT
  DOG
}

enum AnimalGender {
  MALE
  FEMALE
}

model AnimalsOnSickness {
  animal     Animal   @relation(fields: [animalId], references: [id])
  animalId   String   @map("animal_id")
  sickness   Sickness @relation(fields: [sicknessId], references: [id])
  sicknessId String   @map("sickness_id")
  addedAt    DateTime @default(now())

  @@id([animalId, sicknessId])
}

model Complaint {
  id                    String                  @id @db.VarChar(36)
  name                  String                  @db.VarChar(55)
  phone                 String                  @db.VarChar(15)
  specie                AnimalSpecie
  description           String                  @db.VarChar(510)
  address               ComplaintAddress        @relation(fields: [adressId], references: [id])
  adressId              String                  @unique @map("adress_id") @db.VarChar(36)
  status       ComplaintStatus         @default(WAITING_APPROVAL)
  addedAt               DateTime                @default(now())
  protectorSawComplaint ProtectorSawComplaint[]
}

model ComplaintAddress {
  id         String     @id @db.VarChar(36)
  street     String     @db.VarChar(55)
  zipCode    String     @db.VarChar(10)
  complement String?    @db.VarChar(55)
  city       String     @db.VarChar(55)
  state      String     @db.VarChar(55)
  Complaint  Complaint?
}

model ProtectorSawComplaint {
  protector   Account   @relation(fields: [protectorId], references: [id])
  protectorId String    @map("protector_id") @db.VarChar(255)
  complaint   Complaint @relation(fields: [complaintId], references: [id])
  complaintId String    @map("complaint_id") @db.VarChar(255)

  @@id([complaintId, protectorId])
}

model AnimalTransference {
  id          String                   @id @db.VarChar(36)
  animal      Animal                   @relation(fields: [animalId], references: [id])
  animalId    String                   @map("animal_id")
  requester   Account                  @relation(name: "requester", fields: [requesterId], references: [id])
  requesterId String                   @map("requester_id") @db.VarChar(36)
  receiver    Account                  @relation(name: "receiver", fields: [receiverId], references: [id])
  receiverId  String                   @map("receiver_id") @db.VarChar(36)
  status      AnimalTransferenceStatus
  addedAt     DateTime                 @default(now())

  @@map("AnimalTransferences")
}

enum ComplaintStatus {
  ANSWERED
  CANCELED
  REQUESTED
  WAITING_APPROVAL
}

enum AnimalTransferenceStatus {
  ACCEPTED
  DELETED
  REFUSED
  WAITING_APPROVAL
}
